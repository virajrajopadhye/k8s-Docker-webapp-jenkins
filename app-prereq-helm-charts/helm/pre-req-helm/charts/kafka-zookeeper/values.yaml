# Default values for pre-req-helm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

ZOOKEEPER1_ID: 1
ZOOKEEPER2_ID: 2
ZOOKEEPER3_ID: 3

ZOOKEEPER_SERVER_1: "zoo1"
ZOOKEEPER_SERVER_2: "zoo2"
ZOOKEEPER_SERVER_3: "zoo3"

zookeeperImage: digitalwonderland/zookeeper

namespace:
  kafka:
    name: kafka-prereq
    
zkService:
  type: ClusterIP

zkDeployment:
  replicationSet:
    replicas: 1
    progressDeadlineSeconds: 120
    minReadySeconds: 30
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  pod:
    readinessProbe:
      initialDelaySeconds: 15
      periodSeconds: 60
    livenessProbe:
      initialDelaySeconds: 15
      periodSeconds: 60

imageCredentials:
  registry: https://index.docker.io/v1/
  Docker_username: ""
  Docker_password: ""

KAFKA_ADVERTISED_PORT: 9092
KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2181,zoo3:2181"
KAFKA_SERVER_1: "kafka1"
KAFKA_SERVER_2: "kafka2"
KAFKA_SERVER_3: "kafka3"

KAFKA1_ID: 0
KAFKA2_ID: 1
KAFKA3_ID: 2

kafkaImage: khvr/kafka:latest
# kafkaImage: wurstmeister/kafka

kafkaDeployment:
  replicationSet:
    replicas: 1
    progressDeadlineSeconds: 120
    minReadySeconds: 30
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0

Topic_partition_replicationFactor1: "watch:2:3"
Topic_partition_replicationFactor2: "weather:2:3"